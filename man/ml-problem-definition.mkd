### Key Elements of Machine Learning Problem

Machine learning (ML) problems have three main elements: observation, feature, and label.

##### Observation

An observation (example, or instance) is the object or entity that is being learned from and predicted on.
When detecting fraudulent orders placed on retail sites, orders are the entities which need 
to be determined as fraud or non-fraud, and each order constitutes a single observation for the problem. 
When classifying products into appropriate categories, each individual product is 
the object being trained on and scored, and constitutes an observation for that problem.

##### Feature

Usually, an observation is described by a set of features, also known as attributes or variables.
e.g., the features of an order include the date/time, the product, the cost, the buyer, the shipping cost, and so on.
The features of a product are its title, description, price, brand, model #, average # of glance views per day, # of reviews, etc.
Features can have different data types: numeric (real valued), binary (two values), categorical (multiple values) or unstructured text.

##### Label

The label (or target variable) is the value that we are trying to predict. Labels are a special requirement for Supervised Learning, 
because we learn from the values in the historical data.

In order fraudulent detection problem, the labels would be binary indicators in the historical data,
which indicate whether an order was determined to be fraudulent or not.
In product classification problem, the training data would contain products which have been categorized using rules or manual review.
The assigned category for each product would then constitute the label for this problem.

Note that labels must be assigned to observations in the historical data which is used for training and testing a model.
The training algorithm tries to learn the best model that can accurately predict the (known) label for maximum number of observations during the testing phase. When using the model for predictions, we only need observations with corresponding features without the labels. The model will then predict the label based on the learned parameters.

### Machine Learning Applications in Real-World Problems

##### Is it an ML problem? 

It is important to remember that ML is not a silver bullet. There are certain use cases where simple, robust solutions can be developed without using ML techniques.
For example, ML is not needed when the target value to be determined can be obtained using simple mappings, computations or rules which are relatively static.
For example, obtaining the address or phone number of a customer, calculating order volume or GMS value for each customer, or determining if a customer has a new account.
Similarly, ML is not required to model processes that are highly deterministic, such as the workflow of a customer placing an order on retail sites.
Such a process has fixed, predetermined steps which can be programmed without any data-driven learning needed.

##### Best Use Cases

The value or decision to be predicted has a complex relationship with a number of data elements, and these relationships are impossible to derive manually or program directly.
Tasks like handwriting or speech recognition that are learned by humans are difficult to specify algorithmically – ML approaches based on recognizing patterns are a lot more effective.
When these tasks need to be done repeatedly at scale, humans are no longer a viable option and automation using ML is the only option.
Automated pattern recognition based on learning techniques is also required if patterns are hidden in large amounts of data, or patterns change in time dynamically, or the number of patterns is extremely large, e.g., when personalization is needed, a separate pattern needs to be learned for each user.

To summarize, the following are guidelines and examples of use cases where you would want to consider using ML methods for solving a given problem:

* Learn it when you can’t code it. Examples: Recognizing Speech/image/gestures.
* Learn it when you can’t scale it. Examples: Applications involving high speed, large scale of data, large number of data points, repetitive tasks needing human-like expertise like Recommendations, Spam & Fraud detection.
* Learn it when you have to adapt/personalize. Examples: Predictive typing (Swype), Kinect.
* Learn it when you can’t track it. Examples: Scenarios where solution changes in time dynamically with input such as AI gaming, robot control, jeopardy.

